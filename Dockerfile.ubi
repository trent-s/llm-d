ARG CUDA_MAJOR=12
ARG CUDA_MINOR=8
ARG CUDA_PATCH=1

# ============================================================================
# BUILD STAGE - Install build dependencies and create wheels
# ============================================================================
FROM nvcr.io/nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-devel-ubi9 AS builder

ARG CUDA_MAJOR=12
ARG CUDA_MINOR=8
ARG CUDA_PATCH=1
ARG PYTHON_VERSION

ARG USE_SCCACHE=true

COPY sccache.config.toml /tmp

RUN --mount=type=secret,id=aws_access_key_id \
    --mount=type=secret,id=aws_secret_access_key \
    --mount=type=tmpfs,target=/root/.aws \
    if [ "${USE_SCCACHE}" = "true" ]; then \
        set -Eeuo pipefail && \
        # install sccache
        dnf install -y openssl-devel && \
        mkdir -p /tmp/sccache && \
        cd /tmp/sccache && \
        curl -sLO https://github.com/mozilla/sccache/releases/download/v0.10.0/sccache-v0.10.0-x86_64-unknown-linux-musl.tar.gz && \
        tar -xf sccache-v0.10.0-x86_64-unknown-linux-musl.tar.gz && \
        mv sccache-v0.10.0-x86_64-unknown-linux-musl/sccache /usr/local/bin/sccache && \
        cd /tmp && \
        rm -rf /tmp/sccache && \
        # sccache configurations
        mkdir -p $HOME/.config/sccache && \
        mv /tmp/sccache.config.toml $HOME/.config/sccache/config.toml && \
        export SCCACHE_CONF=$HOME/.config/sccache/config.toml && \
        # build out AWS creds and configs
        umask 077 && \
        AKI="$(cat /run/secrets/aws_access_key_id)" && \
        SAK="$(cat /run/secrets/aws_secret_access_key)" && \
        { \
        echo "[default]"; \
        echo "region=us-west-2"; \
        echo "aws_access_key_id=${AKI}"; \
        echo "aws_secret_access_key=${SAK}"; \
        } > /root/.aws/credentials && \
        { \
        echo "[default]"; \
        echo "region=us-west-2"; \
        echo "output=json"; \
        } > /root/.aws/config && \
        export AWS_SHARED_CREDENTIALS_FILE=/root/.aws/credentials AWS_CONFIG_FILE=/root/.aws/config AWS_DEFAULT_REGION="us-west-2" AWS_PROFILE=default && \
        export SCCACHE_IDLE_TIMEOUT=0 && \
        export SCCACHE_LOG=debug && \
        export RUSTC_WRAPPER="sccache" && \
        /usr/local/bin/sccache --start-server && \
        # verify sccache is working with the s3 backend
        /usr/local/bin/sccache --show-stats; \
    fi

WORKDIR /workspace

# Create UV constraint files
RUN cat > /tmp/build-constraints.txt <<'EOF'
torch==2.8.0
EOF

RUN cat > /tmp/constraints.txt <<'EOF'
torch==2.8.0
EOF

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    UV_LINK_MODE=copy \
    TORCH_CUDA_ARCH_LIST="9.0a;10.0+PTX" \
    PYTHON_VERSION=${PYTHON_VERSION:-3.12} \
    UV_TORCH_BACKEND=${UV_TORCH_BACKEND:-cu${CUDA_MAJOR}${CUDA_MINOR}} \
    UV_BUILD_CONSTRAINT=/tmp/build-constraints.txt \
    UV_CONSTRAINT=/tmp/constraints.txt \
    VIRTUAL_ENV=/opt/vllm 

# Update base packages
RUN dnf -q update -y && dnf clean all

# Install base packages and EPEL in single layer
RUN dnf -q install -y dnf-plugins-core && \
    dnf -q install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
    dnf config-manager --set-enabled epel && \
    DOWNLOAD_ARCH=""; \
    if [ "$(uname -m)" = "amd64" ] || [ "$(uname -m)" = "x86_64" ]; then \
        DOWNLOAD_ARCH="x86_64"; \
    fi; \
    dnf config-manager --add-repo "https://developer.download.nvidia.com/compute/cuda/repos/rhel9/${DOWNLOAD_ARCH}/cuda-rhel9.repo" && \
    dnf -q install -y --allowerasing \
        python${PYTHON_VERSION} python${PYTHON_VERSION}-pip python${PYTHON_VERSION}-wheel \
        python${PYTHON_VERSION}-devel \
        python3.9-devel \
        which procps findutils tar \
        gcc gcc-c++ \
        make cmake \
        autoconf automake libtool \
        git \
        curl wget \
        gzip \
        zlib-devel \
        openssl-devel \
        pkg-config \
        libuuid-devel \
        glibc-devel \
        rdma-core-devel \
        libibverbs \
        libibverbs-devel \
        numactl-libs \
        subunit \
        pciutils \
        pciutils-libs \
        ninja-build \
        xz \
        rsync \
    && dnf clean all

# Setup Python virtual environment
RUN python${PYTHON_VERSION} -m venv /opt/vllm && \
    ${VIRTUAL_ENV}/bin/pip install --progress-bar off --no-cache -U pip wheel uv meson-python ninja pybind11 build

ENV LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/lib:/usr/local/lib64" \
    CPATH="/usr/include:/usr/local/include:/usr/local/cuda/include" \
    PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig"

ARG NVSHMEM_VERSION=3.3.20

# Set NVSHMEM paths for CMake discovery
ENV NVSHMEM_DIR="/opt/nvshmem-${NVSHMEM_VERSION}" \
    PATH="/opt/nvshmem-${NVSHMEM_VERSION}/bin:${PATH}" \
    CPATH="/opt/nvshmem-${NVSHMEM_VERSION}/include:${CPATH}" \
    LIBRARY_PATH="/opt/nvshmem-${NVSHMEM_VERSION}/lib:${LIBRARY_PATH}"

# Build and install gdrcopy
# TODO: CUSTOM LOGGING
RUN --mount=type=cache,target=/var/cache/git \
    git clone https://github.com/NVIDIA/gdrcopy.git && \
    cd gdrcopy && \
    PREFIX=/usr/local DESTLIB=/usr/local/lib make lib_install && \
    cp src/libgdrapi.so.2.* /usr/lib64/ && \
    ldconfig && \
    cd .. && rm -rf gdrcopy

ENV CPPFLAGS="-I$NVSHMEM_DIR/include ${CPPFLAGS}" \
    LDFLAGS="-L$NVSHMEM_DIR/lib ${LDFLAGS}"

# Copy patches before build
COPY patches/ /tmp/patches/

# Build and install NVSHMEM from source with coreweave patch
RUN cd /tmp && \
    wget https://developer.download.nvidia.com/compute/redist/nvshmem/${NVSHMEM_VERSION}/source/nvshmem_src_cuda12-all-all-${NVSHMEM_VERSION}.tar.gz -O nvshmem_src_cuda${CUDA_MAJOR}.tar.gz && \
    tar -xf nvshmem_src_cuda${CUDA_MAJOR}.tar.gz && \
    cd nvshmem_src && \
    git apply /tmp/patches/cks_nvshmem${NVSHMEM_VERSION}.patch && \
    mkdir build && \
        cd build && \
        cmake \
        -G Ninja \
        -DNVSHMEM_PREFIX=${NVSHMEM_DIR} \
        -DCMAKE_CUDA_ARCHITECTURES="90a;100" \
        -DNVSHMEM_PMIX_SUPPORT=0 \
        -DNVSHMEM_LIBFABRIC_SUPPORT=0 \
        -DNVSHMEM_IBRC_SUPPORT=1 \
        -DNVSHMEM_IBGDA_SUPPORT=1 \
        -DNVSHMEM_IBDEVX_SUPPORT=1 \
        -DNVSHMEM_SHMEM_SUPPORT=0 \
        -DNVSHMEM_USE_GDRCOPY=1 \
        -DNVSHMEM_MPI_SUPPORT=0 \
        -DNVSHMEM_USE_NCCL=0 \
        -DNVSHMEM_BUILD_TESTS=0 \
        -DNVSHMEM_BUILD_EXAMPLES=0 \
        -DGDRCOPY_HOME=/usr/local \
        -DNVSHMEM_DISABLE_CUDA_VMM=1 \
        .. && \
        ninja -j$(nproc) && \
        ninja install && \
        cd /tmp && rm -rf nvshmem_src*

# Pin torch, so all deps are built against the same version 
# as vllm itself
RUN --mount=type=cache,target=/root/.cache/uv \
  source ${VIRTUAL_ENV}/bin/activate && \
  uv pip install \
    # global
    numpy torch \
    pyyaml \
    types-PyYAML \
    pytest \ 
    patchelf>=0.11.0

RUN echo "/usr/local/lib" > /etc/ld.so.conf.d/local.conf && \
    echo "/usr/local/lib64" >> /etc/ld.so.conf.d/local.conf && \
    ldconfig

WORKDIR /workspace

# Define commit SHAs as build args to avoid layer invalidation
ARG LMCACHE_COMMIT_SHA=0db8ae4746a207a72483d716b5f82545a2ead24b
ARG VLLM_COMMIT_SHA=e017120ed146cc3069d18428322d67881cb95e67

# Define if lmcache should be built 
# Clone repositories with cache mounts
RUN --mount=type=cache,target=/var/cache/git \
    git clone https://github.com/neuralmagic/LMCache.git && \
    cd LMCache && \
    git checkout -q $LMCACHE_COMMIT_SHA && \
    cd .. && \
    # Build LMCache wheel
    cd LMCache && \
    source ${VIRTUAL_ENV}/bin/activate && \
    uv build --wheel --no-build-isolation --out-dir /wheels  && \
    cd ..

# Use existing virtual environment at /opt/vllm
WORKDIR /workspace/vllm

# Install DeepEP and DeepGEMM dependencies
ARG DEEPEP_URL="https://github.com/deepseek-ai/DeepEP"
ARG DEEPGEMM_URL="https://github.com/deepseek-ai/DeepGEMM"
ARG PPLX_KERNELS_URL="https://github.com/perplexityai/pplx-kernels"

# Create wheels directory
RUN mkdir -p /wheels

# Build compiled packages as wheels (only ones that need build tools)
RUN --mount=type=cache,target=/root/.cache/uv \
    source ${VIRTUAL_ENV}/bin/activate && \
    \
    # Install build tools
    uv pip install build cuda-python numpy setuptools-scm ninja "nvshmem4py-cu${CUDA_MAJOR}" && \
    \
    # Build FlashInfer wheel
    cd /tmp && \
    # Remove if already installed to prevent versioning issues
    uv pip uninstall flashinfer-python || true && \
    git clone https://github.com/flashinfer-ai/flashinfer.git && \
    cd flashinfer && \
    uv pip install -e . --no-build-isolation && \
    uv build --wheel --no-build-isolation --out-dir /wheels && \
    cd .. && rm -rf flashinfer && \
    \
    # Build DeepEP wheel
    git clone "${DEEPEP_URL}" deepep && \
    cd deepep && \
    git checkout v1.2.1 && \
    uv build --wheel --no-build-isolation --out-dir /wheels && \
    cd .. && rm -rf deepep && \
    \
    # Build DeepGEMM wheel
    git clone "${DEEPGEMM_URL}" deepgemm && \
    cd deepgemm && \
    # git checkout multi_arch_support && \
    git submodule update --init --recursive && \
    uv build --wheel --no-build-isolation --out-dir /wheels && \
    cd .. && rm -rf deepgemm && \
    \
    # Build pplx-kernels wheel
    git clone ${PPLX_KERNELS_URL} pplx-kernels && \
    cd pplx-kernels && \
    # git checkout build-fixes && \
    NVSHMEM_PREFIX=${NVSHMEM_DIR} uv build --wheel --out-dir /wheels && \
    cd .. && rm -rf pplx-kernels

# verify builds are hitting the cache
RUN sccache --show-stats

# ============================================================================
# RUNTIME STAGE - Minimal runtime image
# ============================================================================
FROM nvcr.io/nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-devel-ubi9 AS runtime

ARG CUDA_MAJOR=12
ARG CUDA_MINOR=8
ARG CUDA_PATCH=1
ARG PYTHON_VERSION
ARG NVSHMEM_VERSION=3.3.20

RUN cat > /tmp/constraints.txt << 'EOF'
torch==2.8.0
EOF

ENV LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PYTHON_VERSION=${PYTHON_VERSION:-3.12} \
    UV_TORCH_BACKEND=${UV_TORCH_BACKEND:-cu${CUDA_MAJOR}${CUDA_MINOR}} \
    UV_CONSTRAINT=/tmp/constraints.txt \
    VIRTUAL_ENV=/opt/vllm \
    NVSHMEM_DIR="/opt/nvshmem-${NVSHMEM_VERSION}" \
    # LD_LIBRARY_PATH needs the torch path to apply proper linkers so as not to produce torch ABI missmatch
    LD_LIBRARY_PATH="/opt/vllm/lib64/python${PYTHON_VERSION}/site-packages/torch/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/local/lib:/usr/local/lib64:/opt/nvshmem-${NVSHMEM_VERSION}/lib:${LD_LIBRARY_PATH}" \
    PATH="/opt/nvshmem-${NVSHMEM_VERSION}/bin:${PATH}" \
    CPATH="/opt/nvshmem-${NVSHMEM_VERSION}/include:${CPATH}" \
    TORCH_CUDA_ARCH_LIST="9.0a;10.0+PTX"

# Update base packages
RUN dnf update -y && dnf clean all

# Install only runtime dependencies
RUN dnf install -y --allowerasing \
        python${PYTHON_VERSION} python${PYTHON_VERSION}-pip python${PYTHON_VERSION}-devel \
        rdma-core-devel \
        numactl-libs \
        pciutils \
        procps-ng \
        git \
        curl \
        gcc && dnf clean all

# Copy gdrcopy libraries from builder
COPY --from=builder /usr/lib64/libgdrapi.so.2.* /usr/lib64/
COPY --from=builder /usr/local/lib/libgdrapi.so* /usr/local/lib/

# Copy compiled NVSHMEM libraries from builder
COPY --from=builder /opt/nvshmem-${NVSHMEM_VERSION}/ /opt/nvshmem-${NVSHMEM_VERSION}/

# Setup ldconfig and library paths
RUN echo "/usr/local/lib" > /etc/ld.so.conf.d/local.conf && \
    echo "/usr/local/lib64" >> /etc/ld.so.conf.d/local.conf && \
    echo "/opt/nvshmem-${NVSHMEM_VERSION}/lib" >> /etc/ld.so.conf.d/local.conf && \
    ldconfig

# Setup Python virtual environment
RUN python${PYTHON_VERSION} -m venv /opt/vllm && \
    ${VIRTUAL_ENV}/bin/pip install --no-cache -U pip wheel uv

# Copy compiled wheels
COPY --from=builder /wheels/*.whl /tmp/wheels/

# Define commit SHAs as build args to avoid layer invalidation
ARG LMCACHE_COMMIT_SHA=0db8ae4746a207a72483d716b5f82545a2ead24b
ARG VLLM_COMMIT_SHA=e017120ed146cc3069d18428322d67881cb95e67

ARG VLLM_PREBUILT=0

# Public LLM-D vllm wheels index
ARG VLLM_WHEEL_URL="https://gitlab.com/api/v4/projects/72482892/packages/pypi/simple"

# Install PyTorch and cuda-python
# Install all compiled wheels (DeepEP, DeepGEMM, pplx-kernels, LMCache, nixl)
# Installs vllm source editably (unless using custom prebuilt) for dev experience
RUN --mount=type=cache,target=/var/cache/git \
    source /opt/vllm/bin/activate && \
    uv pip install nixl "nvshmem4py-cu${CUDA_MAJOR}" cuda-python 'huggingface_hub[hf_xet]' && \
    uv pip install /tmp/wheels/*.whl && \
    git clone https://github.com/vllm-project/vllm.git /opt/vllm-source && \
    cd /opt/vllm-source && \
    git checkout -q ${VLLM_COMMIT_SHA}; \
    VLLM_WHEEL_ARCH=""; \
    if [ "$(uname -m)" = "amd64" ] || [ "$(uname -m)" = "x86_64" ]; then \
        VLLM_WHEEL_ARCH="x86_64"; \
    fi; \
    if [ "${VLLM_PREBUILT}" = "1" ] && [ -n "${VLLM_WHEEL_URL}" ]; then \
        VLLM_COMMIT_SHA_SHORT="g$(git rev-parse --short HEAD)"; \
        CUDA_SHORT="cu${CUDA_MAJOR}${CUDA_MINOR}"; \
        export VLLM_WHEEL_VERSION="0.0.0+${VLLM_COMMIT_SHA_SHORT}.${CUDA_SHORT}"; \
        VLLM_USE_PRECOMPILED=1 uv pip install --index-url "${VLLM_WHEEL_URL}" "vllm==${VLLM_WHEEL_VERSION}"; \
    else \
        VLLM_COMMIT="$(git merge-base HEAD origin/main)"; \
        VLLM_PRECOMPILED_WHEEL_LOCATION="https://wheels.vllm.ai/${VLLM_COMMIT}/vllm-1.0.0.dev-cp38-abi3-manylinux1_${VLLM_WHEEL_ARCH}.whl"; \
        VLLM_USE_PRECOMPILED=1 uv pip install --editable .; \
    fi; \
    uv pip install "nvidia-nccl-cu12>=2.26.2.post1" && \
    rm -rf /tmp/wheels

RUN dnf autoremove -y && dnf clean all

# setup non-root user for OpenShift
RUN umask 002 && \
    useradd --uid 2000 --gid 0 vllm && \
    rm -rf /home/vllm && \
    mkdir -p /home/vllm && \
    chown vllm:root /home/vllm && \
    chmod g+rwx /home/vllm

# default openionated env vars for HF_HOME and TRANSFORMERS_CACHE, over-writeable
ENV LLM_D_MODELS_DIR=/var/lib/llm-d/models \
    HF_HOME=/var/lib/llm-d/.hf \
    TRANSFORMERS_CACHE=/var/lib/llm-d/.cache/huggingface

# creates default models directory and makes path writeable for both root and default user, with symlink for convenience
# find command keeps group=0 on all new subdirs created later
RUN mkdir -p "$LLM_D_MODELS_DIR" "$HF_HOME" "$TRANSFORMERS_CACHE" && \
    chown -R root:0 /var/lib/llm-d && \
    chmod -R g+rwX /var/lib/llm-d && \
    find /var/lib/llm-d -type d -exec chmod g+s {} \; && \
    ln -snf /var/lib/llm-d/models /models

ENV PATH="${VIRTUAL_ENV}/bin:/usr/local/nvidia/bin:${PATH}" \
    HOME=/home/vllm \
    VLLM_USAGE_SOURCE=production-docker-image \
    VLLM_WORKER_MULTIPROC_METHOD=fork \
    OUTLINES_CACHE_DIR=/tmp/outlines \
    NUMBA_CACHE_DIR=/tmp/numba \
    TRITON_CACHE_DIR=/tmp/triton \
    TRITON_LIBCUDA_PATH=/usr/lib64 \
    TORCH_NCCL_HEARTBEAT_TIMEOUT_SEC=15 \
    TORCH_NCCL_DUMP_ON_TIMEOUT=0 \
    VLLM_SKIP_P2P_CHECK=1 \
    VLLM_CACHE_ROOT=/tmp/vllm \
    # NOTE: workaround for hang with XET. This should be removed 
    # in a future release when we get to the bottom of the issue.
    HF_HUB_DISABLE_XET=1

USER 2000
WORKDIR /home/vllm

ENTRYPOINT ["python", "-m", "vllm.entrypoints.openai.api_server"]
